@page "/"
@inject GameSignalRClient _signalRClient

<PageTitle>Index</PageTitle>

<style>
    .game-tile {
        height: calc((100vh - 10rem) / @rows);
        width: calc((100vw - 2rem - 80px) / @cols);
    }
</style>

<div class="board-container">
    @if (Board is not null)
    {
        <table id="game-board" class="game-board">
            @for (var y = Board.Height - 1; y >= 0; y--)
            {
                <tr>
                    @for (var x = 0; x < Board.Width; x++)
                    {
                        var coord = new Coordinates(x, y);
                        <td id="tile" class="game-tile
                        @GetTileColour(coord)
                        @(GetIsSelected(coord) ? "selected":"")
                                    ">
                            <input type="button" class="tile-button" @onclick="() => OnTileClick(coord)" />
                        </td>
                    }
                </tr>
            }
        </table>
        @if (SelectedTile.Value is not null)
        {
            <MovementOverlay SelectedCoordinates="SelectedTile.Value ?? default" />
        }
    }
</div>

@code {
    private readonly Subject<bool> _disposed = new();
    private IDisposable? _gameBoardSubscription;
    public string name = "Christopher";
    private int rows = GlobalConstants.ySize;
    private int cols = GlobalConstants.xSize;

    public GameBoard? Board { get; set; }
    public readonly BehaviorSubject<Coordinates?> SelectedTile = new(null);

    protected override async Task OnInitializedAsync()
    {
        _gameBoardSubscription = _signalRClient.OnBoardChanged(board =>
        {
            Board = board;
            Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(board));
            StateHasChanged();
        });

        await _signalRClient.Start();

        Board = await _signalRClient.GetGameBoard();
        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(Board));

        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        _signalRClient.Stop().GetAwaiter().GetResult();
        _disposed.OnNext(true);
        _gameBoardSubscription?.Dispose();
    }

    public bool GetIsSelected(Coordinates coordinates)
        => SelectedTile.Value?.Equals(coordinates) ?? false;

    private void OnTileClick(Coordinates coordinates)
    {
        if (SelectedTile.Value is null || !SelectedTile.Value.Equals(coordinates))
        {
            SelectedTile.OnNext(coordinates);
        }
        else
        {
            SelectedTile.OnNext(null);
        }
    }

    private string GetTileColour(Coordinates coordinates)
    {
        if (Board is null)
        {
            return "tile-BlueTile";
        }

        var tileType = Board.Tiles[coordinates.X][coordinates.Y];
        return $"tile-{tileType.ToString()}";
    }
}
