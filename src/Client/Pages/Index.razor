@page "/"
@inject GameSignalRClient _signalRClient

<PageTitle>Index</PageTitle>

<style>
    .game-tile {
        height: calc(@TileCssUtil.Height);
        width: calc(@TileCssUtil.Width);
    }
</style>

<div class="board-container">
    @{
        var board = Board.Value;
    }
    @if (board is not null)
    {
        <table id="game-board" class="game-board">
            @for (var y = board.Height - 1; y >= 0; y--)
            {
                <tr>
                    @for (var x = 0; x < board.Width; x++)
                    {
                        var coord = new Coordinates(x, y);
                        <td id="tile" class="game-tile
                        @GetTileColour(coord)
                        @(GetIsSelected(coord) ? "selected":"")
                        @(GetIsDestroyed(coord) ? "destroyed":"")
                                                ">
                            <input type="button"
                                class="tile-button"
                                @onclick="() => OnTileClick(coord)" />
                        </td>
                    }
                </tr>
            }
        </table>
        @if (SelectedTile.Value is not null)
        {
            <MovementOverlay SelectedCoordinates="SelectedTile.Value ?? default"
            OnMove="() => SelectedTile.OnNext(null)" />
        }
        @if (board.GetIsGameOver())
        {
            <GameOverOverlay />
        }
    }
</div>

@code {
    private readonly Subject<bool> _disposed = new();
    private IDisposable? _gameBoardSubscription;

    public readonly BehaviorSubject<GameBoard?> Board = new(null);
    public readonly BehaviorSubject<Coordinates?> SelectedTile = new(null);

    protected override async Task OnInitializedAsync()
    {
        _gameBoardSubscription = _signalRClient.OnBoardChanged(board =>
        {
            HandleBoardStateReceived(board);
        });

        _signalRClient.Opened += async () =>
        {
            HandleBoardStateReceived(await _signalRClient.GetGameBoard());
        };

        _signalRClient.Closed += (_) =>
        {
            HandleBoardStateReceived(null);
            return Task.CompletedTask;
        };

        await _signalRClient.Start();

        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        _signalRClient.Stop().GetAwaiter().GetResult();
        _disposed.OnNext(true);
        _gameBoardSubscription?.Dispose();
    }

    public bool GetIsSelected(Coordinates coordinates)
        => SelectedTile.Value?.Equals(coordinates) ?? false;

    public bool GetIsDestroyed(Coordinates coordinates) =>
        Board.Value is not null &&
        Board.Value.Tiles[coordinates.X][coordinates.Y].IsDestroyed &&
        Board.Value.Tiles[coordinates.X][coordinates.Y].TileColour != TileColour.EmptyCell;

    private void OnTileClick(Coordinates coordinates)
    {
        if (SelectedTile.Value is null || !SelectedTile.Value.Equals(coordinates))
        {
            SelectedTile.OnNext(coordinates);
        }
        else
        {
            SelectedTile.OnNext(null);
        }
    }

    private string GetTileColour(Coordinates coordinates)
    {
        if (Board.Value is null)
        {
            return "tile-EmptyTile";
        }

        var tileType = Board.Value.Tiles[coordinates.X][coordinates.Y];
        return $"tile-{tileType.TileColour.ToString()}";
    }

    private void HandleBoardStateReceived(GameBoard? board)
    {
        Board.OnNext(board);
        StateHasChanged();
    }
}
