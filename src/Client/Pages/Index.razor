@page "/"
@inject GameSignalRClient _signalRClient

<PageTitle>Shandy Crush Surprised</PageTitle>

<style>
    .game-tile {
        height: calc(@TileCssUtil.Height);
        width: calc(@TileCssUtil.Width);
    }
</style>
<header>
    <img src="/images/Shandy-Crush.png" class="title-img" />
</header>
<div class="board-container" @onkeypress="e => OnKeyPress(e)">
    @{
        var board = Board.Value;
    }
    @if (board is not null)
    {
        <table id="game-board" class="game-board">
            @for (var y = board.Height - 1; y >= 0; y--)
            {
                <tr>
                    @for (var x = 0; x < board.Width; x++)
                    {
                        var tile = board.Tiles[x][y];
                        var coord = new Coordinates(x, y);
                        <td id="tile" class="game-tile
                            @GetTileColourCssClass(tile)
                            @(GetIsSelected(coord) ? "selected":"")
                            @(tile.GetIsDestroyed() ? "destroyed":"")">
                            <input type="button"
                                   class="tile-button"
                                   @onclick="() => OnTileClick(coord)" />
                        </td>
                    }
                </tr>
            }
        </table>
        @if (SelectedTile.Value is not null)
        {
            <MovementOverlay SelectedCoordinates="SelectedTile.Value ?? default"
                             OnMoved="() => SelectedTile.OnNext(null)" />
        }
        @if (board.GetIsGameOver())
        {
            <GameOverOverlay />
        }
    }
</div>

@code {
    private readonly Subject<bool> _disposed = new();
    private readonly Random _rng = new();
    private IDisposable? _gameBoardSubscription;
    private readonly Timer _copilotTimer;

    public readonly BehaviorSubject<GameBoard?> Board = new(null);
    public readonly BehaviorSubject<Coordinates?> SelectedTile = new(null);
    public readonly BehaviorSubject<bool> CopilotMode = new(false);

    public Index()
    {
        _copilotTimer = new(OnCopilotTimerTick, default, 0, 0);
    }

    protected override async Task OnInitializedAsync()
    {
        _gameBoardSubscription = _signalRClient.OnBoardChanged(board =>
        {
            HandleBoardStateReceived(board);
        });

        _signalRClient.Opened += async () =>
        {
            HandleBoardStateReceived(await _signalRClient.GetGameBoard());
        };

        _signalRClient.Closed += (_) =>
        {
            HandleBoardStateReceived(null);
            return Task.CompletedTask;
        };

        await _signalRClient.Start();

        this.CopilotMode.Subscribe(enabled =>
        {
            if (enabled)
            {
                _copilotTimer.Change(1000, 1000);
            }
            else
            {
                _copilotTimer.Change(0, 0);
            }
        });

        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        _copilotTimer.Dispose();
        _signalRClient.Stop().GetAwaiter().GetResult();
        _disposed.OnNext(true);
        _gameBoardSubscription?.Dispose();
    }

    public bool GetIsSelected(Coordinates coordinates)
        => SelectedTile.Value?.Equals(coordinates) ?? false;

    public void OnTileClick(Coordinates coordinates)
    {
        if (SelectedTile.Value is null || !SelectedTile.Value.Equals(coordinates))
        {
            SelectedTile.OnNext(coordinates);
        }
        else
        {
            SelectedTile.OnNext(null);
        }
    }

    public void OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "c")
        {
            CopilotMode.OnNext(!CopilotMode.Value);
        }
    }

    private string GetTileColourCssClass(Tile tile)
    {
        return $"tile-{tile.TileColour.ToString()}";
    }

    private void HandleBoardStateReceived(GameBoard? board)
    {
        Board.OnNext(board);
        StateHasChanged();
    }

    private void OnCopilotTimerTick(object? state)
    {
        var board = Board.Value;

        if (board is null)
        {
            return;
        }

        var x = _rng.Next(0, board.Width);
        var y = _rng.Next(0, board.Height);
        var coords = new Coordinates(x, y);
        var dir = (Direction)_rng.Next(0, 4);
        _signalRClient.Move(coords, dir);
    }
}
